{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":["file:///C:/mtvs/13_next/module02-jsx_component/src/component/chap01/section03/JSXRules.jsx"],"sourcesContent":["/*\r\nJSX에서 주의해야 할 문법 규칙\r\n\r\nJSX는 HTML과 유사해 보이지만, 몇 가지 중요한 문법 규칙을 따라야 한다.\r\n이러한 규칙들을 이해하고 준수하는 것이 오류 없는 React 코드를 작성하는 데 중요하다.\r\n\r\n주요 규칙:\r\n1. 하나의 최상위 요소로 감싸야 함 -> 플래그먼트 \r\n2. 모든 태그는 닫혀야 함 -> (페어 방식과 싱글 클로즈 태그 방식 모두 닫아야함)\r\n3. JSX 내에서 JavaScript 조건문 사용시 -> {} 내부에 작성\r\n4. 예약어와 속성 이름 (class → className) -> js 방식으로 속성 참조\r\n5. 주석 작성 방법 -> 중괄호 내부에 작성 {}\r\n*/\r\n\r\nfunction JSXRules() {\r\n    // 예제용 변수\r\n    const isLoggedIn = true;\r\n    const items = ['사과', '바나나', '오렌지'];\r\n\r\n    return (\r\n        <div>\r\n            <h1>JSX에서 주의해야 할 문법 규칙</h1>\r\n\r\n            {/*\r\n            1. 하나의 최상위 요소 규칙\r\n                React의 컴포넌트는 반드시 하나의 최상위 요소(루트 노드)로 감싸져 있어야 한다.\r\n\r\n                그 이유는 다음과 같다:\r\n                -DOM 트리 구조의 일관성 : HTML과 마찬가지로, DOM(Document Object Model)은 트리 구조로 이루어져 있다. \r\n                                    트리 구조의 기본 원칙은 반드시 하나의 루트(최상위) 노드가 존재해야 하며, 모든 자식 노드는 이 루트 노드 아래에 위치해야 한다. \r\n                                    만약 여러 개의 형제 노드가 루트 없이 나란히 존재한다면, 트리 구조가 성립하지 않아 DOM 파싱 및 렌더링에 문제가 발생한다.\r\n\r\n                - 컴포넌트 반환값의 명확성: React 컴포넌트는 함수(또는 클래스)로 구현되며, 이 함수는 하나의 값을 반환해야 한다. \r\n                                    여러 개의 JSX 요소를 반환하려면, 하나의 부모 요소로 감싸서 단일 값으로 만들어야 한다. \r\n                                    그렇지 않으면 JavaScript 문법상 오류가 발생한다.\r\n\r\n                -가상 DOM의 효율적 비교 : React는 가상 DOM(Virtual DOM)을 사용하여 변경 사항을 효율적으로 감지하고 실제 DOM에 반영한다. \r\n                                    이 과정에서 각 컴포넌트가 하나의 루트 노드를 가지면, 변경 감지 및 트리 비교가 훨씬 단순하고 효율적으로 이루어진다.\r\n\r\n                - HTML 파서 및 브라우저 호환성: 브라우저의 HTML 파서 역시 하나의 루트 엘리먼트(예: <body> 또는 <html>)를 요구한다. \r\n                                    여러 개의 루트 노드가 있으면 브라우저가 예기치 않게 동작할 수 있다.\r\n\r\n                잘못된 예 : \r\n                return (\r\n                  <h1>제목</h1>\r\n                  <p>내용</p>\r\n                );\r\n\r\n                이러한 이유로, 여러 JSX 요소를 반환할 때는 반드시 하나의 부모 요소(div, section 등)나 React.Fragment(<> </>)로 감싸야 한다.\r\n                Fragment는 실제 DOM에 불필요한 노드를 추가하지 않고 여러 요소를 그룹화할 수 있게 해준다.\r\n            */}\r\n            <div>\r\n                <h2>1. 하나의 최상위 요소 규칙</h2>\r\n                <p>JSX는 반드시 하나의 최상위 요소로 감싸야 한다.</p>\r\n\r\n                {/* 올바른 예 */}\r\n                <div>\r\n                    <p>이렇게 하나의 div로 감싸야 한다.</p>\r\n                    <p>여러 요소를 포함할 수 있다.</p>\r\n                </div>\r\n\r\n                {/* Fragment 사용 예 */}\r\n                <>\r\n                    <p>React Fragment를 사용할 수도 있다.</p>\r\n                    <p>불필요한 div를 추가하지 않아도 된다.</p>\r\n                </>\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            {/*\r\n            2. 닫힘 태그 필수\r\n                JSX는 XML 기반 문법을 따르기 때문에, 모든 태그는 반드시 닫혀야 한다.\r\n                닫힘 태그를 명확히 작성해야 요소의 시작과 끝이 분명해지고, 올바른 트리 구조가 유지된다.\r\n                닫힘 태그가 없으면 렌더링 오류나 예기치 않은 동작이 발생할 수 있다.\r\n                또한, JSX는 JavaScript 코드로 변환되므로, 닫힘 태그가 없으면 문법 오류가 발생할 수 있다.\r\n                HTML에서 닫힘 태그 없이 사용하던 <img>, <input> 등도 JSX에서는 반드시 <img />와 같이 셀프 클로징 형태로 작성해야 한다.\r\n                예)\r\n                // 잘못된 예: <img src=\"image.jpg\">\r\n                // 올바른 예: <img src=\"image.jpg\" />\r\n            */}\r\n            <div>\r\n                <h2>2. 닫힘 태그 필수</h2>\r\n                <p>모든 태그는 반드시 닫혀야 한다.</p>\r\n\r\n\r\n                {/* 올바른 예 */}\r\n                <img src=\"https://via.placeholder.com/150\" alt=\"샘플 이미지\" />\r\n                <input type=\"text\" placeholder=\"닫힘 태그 예시\" />\r\n                <br />\r\n            </div>\r\n\r\n\r\n            <hr />\r\n\r\n\r\n            {/* \r\n            3. 조건부 렌더링\r\n                JSX 내에서는 if문을 직접 사용할 수 없고, 표현식만 사용할 수 있다.\r\n                따라서 조건에 따라 다른 UI를 보여주려면 삼항 연산자(?:), 논리 연산자(&&), 또는 즉시 실행 함수(IIFE) 등을 활용해야 한다.\r\n                조건부 렌더링을 통해 동적으로 컴포넌트나 요소를 표시하거나 숨길 수 있다.\r\n                \r\n                잘못된 예:\r\n                <div>\r\n                  {if (isLoggedIn) {\r\n                    <p>환영합니다!</p>\r\n                  }}\r\n                </div>\r\n\r\n                올바른 예:\r\n                삼항 연산자: {isLoggedIn ? <p>환영합니다!</p> : <p>로그인이 필요합니다.</p>}\r\n                논리 연산자: {items.length > 0 && <p>항목이 있습니다.</p>}\r\n                즉시 실행 함수: {(() => { if (조건) return <A/>; else return <B/>; })()}\r\n            */}\r\n            <div>\r\n                <h2>3. 조건부 렌더링</h2>\r\n                <p>JSX 내에서는 if문을 직접 사용할 수 없고, 표현식만 사용할 수 있다.</p>\r\n\r\n                {/* 올바른 예: 삼항 연산자 */}\r\n                <div>\r\n                    {isLoggedIn ? (\r\n                        <p>환영합니다! 로그인 상태입니다.</p> // return 생략\r\n                    ) : (\r\n                        <p>로그인이 필요합니다.</p> // return 생략\r\n                    )}\r\n                </div>\r\n\r\n                {/* 올바른 예: && 연산자 */}\r\n                <div>\r\n                    {isLoggedIn && <p>이 내용은 로그인 시에만 보입니다.</p>} {/*// return 생략 (로그인 안되어있으면 아무것도 안보임)*/}\r\n                </div>\r\n\r\n                {/*\r\n                올바른 예: 변수에 할당\r\n                if문은 값을 반환하지 않는다 이는 if문 자체는 값을 반환하지 않고, 단순히 조건에 따라 코드 블록을 실행하게 된다.\r\n                하지만 JSX는 중괄호 안에서 반드시 하나의 값을 반환해야 하므로, if문만 단독으로 쓸 수 없다.\r\n                따라서 즉시 실행 함수를 사용하여 값을 반환하는 방식으로 처리해야 한다.\r\n                ***값이 아니고 노드를 반환해야함\r\n                */}\r\n                <div>\r\n                    {(() => {\r\n                        if (items.length === 0) {\r\n                            return <p>항목이 없다.</p>;\r\n                        } else if (items.length === 1) {\r\n                            return <p>1개 항목이 있다.</p>;\r\n                        } else {\r\n                            return <p>{items.length}개 항목이 있다.</p>;\r\n                        }\r\n                    })()}\r\n                </div>\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            {/* 4. 예약어와 속성 이름 */}\r\n            <div>\r\n                <h2>4. 예약어와 속성 이름</h2>\r\n                <p>JSX에서는 HTML 속성명이 camelCase로 변경된다.</p>\r\n\r\n                {/* 잘못된 예:\r\n                <div class=\"container\">...</div>\r\n                <label for=\"username\">...</label>\r\n                */}\r\n\r\n                {/* 올바른 예 */}\r\n                <div className=\"container\">class → className</div>\r\n                <label htmlFor=\"username\">for → htmlFor</label>\r\n                <input id=\"username\" type=\"text\" />\r\n            </div>\r\n\r\n            <hr/>\r\n\r\n            {/* 5. JSX에서 주석 작성하기 */}\r\n            <div>\r\n                <h2>5. JSX에서 주석 작성하기</h2>\r\n                {/* 이것은 JSX 내부의 주석입니다 */}\r\n                <p>\r\n                    주석은 {/* 이렇게 */} 중괄호로 감싸서 작성한다.\r\n                </p>\r\n                {\r\n                    // 한 줄 주석도 이렇게 작성할 수 있다.\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JSXRules;"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAYA;;;;;AAEA,SAAS;IACL,SAAS;IACT,MAAM,aAAa;IACnB,MAAM,QAAQ;QAAC;QAAM;QAAO;KAAM;IAElC,qBACI,8OAAC;;0BACG,8OAAC;0BAAG;;;;;;0BA8BJ,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;kCAAE;;;;;;kCAGH,8OAAC;;0CACG,8OAAC;0CAAE;;;;;;0CACH,8OAAC;0CAAE;;;;;;;;;;;;kCAIP;;0CACI,8OAAC;0CAAE;;;;;;0CACH,8OAAC;0CAAE;;;;;;;;;;;;;;0BAIX,8OAAC;;;;;0BAaD,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;kCAAE;;;;;;kCAIH,8OAAC;wBAAI,KAAI;wBAAkC,KAAI;;;;;;kCAC/C,8OAAC;wBAAM,MAAK;wBAAO,aAAY;;;;;;kCAC/B,8OAAC;;;;;;;;;;;0BAIL,8OAAC;;;;;0BAqBD,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;kCAAE;;;;;;kCAGH,8OAAC;kCACI,qDACG,8OAAC;sCAAE;;;;;iCAAsB,YAAY;;;;;;;kCAO7C,8OAAC;;4BACI,4BAAc,8OAAC;0CAAE;;;;;;4BAAwB;;;;;;;kCAU9C,8OAAC;kCACI,CAAC;4BACE,IAAI,MAAM,MAAM,KAAK,GAAG;gCACpB,qBAAO,8OAAC;8CAAE;;;;;;4BACd,OAAO,IAAI,MAAM,MAAM,KAAK,GAAG;gCAC3B,qBAAO,8OAAC;8CAAE;;;;;;4BACd,OAAO;gCACH,qBAAO,8OAAC;;wCAAG,MAAM,MAAM;wCAAC;;;;;;;4BAC5B;wBACJ,CAAC;;;;;;;;;;;;0BAIT,8OAAC;;;;;0BAGD,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;kCAAE;;;;;;kCAQH,8OAAC;wBAAI,WAAU;kCAAY;;;;;;kCAC3B,8OAAC;wBAAM,SAAQ;kCAAW;;;;;;kCAC1B,8OAAC;wBAAM,IAAG;wBAAW,MAAK;;;;;;;;;;;;0BAG9B,8OAAC;;;;;0BAGD,8OAAC;;kCACG,8OAAC;kCAAG;;;;;;kCAEJ,8OAAC;;4BAAE;4BACgB;;;;;;;;;;;;;;;;;;;AAQnC;uCAEe","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///C:/mtvs/13_next/module02-jsx_component/src/app/chap01/section03/page.jsx"],"sourcesContent":["const { default: JSXRules } = require(\"@/component/chap01/section03/JSXRules\");\r\n\r\nfunction Section03() {\r\n    return (\r\n        <>\r\n            <JSXRules />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Section03;"],"names":[],"mappings":";;;;;AAAA,MAAM,EAAE,SAAS,QAAQ,EAAE;AAE3B,SAAS;IACL,qBACI;kBACI,cAAA,8OAAC;;;;;;AAGb;uCAEe","debugId":null}},
    {"offset": {"line": 395, "column": 0}, "map": {"version":3,"sources":["file:///C:/mtvs/13_next/module02-jsx_component/node_modules/next/dist/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,uBAA2B,EAAF;;IAczC,OAAO;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1C,IAAIP,QAAQC,GAAG,CAACO,SAAS,eAAE;gBACzBL,OAAOC,OAAO,GAAGC,QAAQ;YAC3B,OAAO;;YAEP;QACF,OAAO;;QAMP;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 433, "column": 0}, "map": {"version":3,"sources":["file:///C:/mtvs/13_next/module02-jsx_component/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind' with { 'turbopack-transition': 'next-server-utility' }\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR' with { 'turbopack-transition': 'next-server-utility' }\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: (id: string | number) => unknown\ndeclare const __next_app_load_chunk__: (id: string | number) => Promise<unknown>\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base' with { 'turbopack-transition': 'next-server-utility' }\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AACA,SAASA,kBAAkB,QAAQ,2DAA2D;AAAqC,EAAC;IACzE,wBAAwB;AAWnF,yEAAyE;AAEzE,cAAc;AAGd,SAASE,IAAI,EAAEC,KAAK,GAAE;AAEgG,EAAC;AA8BvH,GAAE;;;;;;;;;AArBF,OAAO,MAAMG,eAAe,6CAAA;IAC1BC,MAAAA,GAASC;IACTC,EAAAA,OAAAA;IAAAA,CAAWC;IAAAA;QACb,EAAC,UAAA;YAAA;YAAA;gBAED,YAAA;oBAAA,CAAc;oBAAA,8BAA0C;4BAAE,QAAA;4BAAA;4BAAA,CAA8C,EAAtB,AAAuB;4BAAA;gCAEzG,UAAA,CAAA;gCAAA,QAAA;oCAAA,IAAA,0BAA4D;oCAAA;iCAAA;4BAC5D;yBAAA,KAAO,MAAMC,cAAc,IAAIX,mBAAmB;;qBAChDY,YAAY;8BACVC,IAAAA,CAAMZ,CAAAA;oBAAAA;iBAAAA,KAAUa,QAAQ;;iBACxBC,MAAM;sBACNC,IAAAA,CAAAA;YAAAA,CAAU;SAAA;;SACV,2CAA2C;cAC3CC,IAAAA;YAAAA,IAAAA,CAAY;YAAA;SAAA;cACZC,OAAAA;YAAAA,EAAU,EAAA;YAAA;SAAA;cACVC,OAAAA;YAAAA,EAAU,EAAE;YAAA;SAAA;UACd,cAAA;YAAA,IAAA;YAAA;SAAA;;GACAC,UAAU;QACRC,MAAAA;IAAAA,KAAYnB;CAAAA","ignoreList":[0],"debugId":null}}]
}